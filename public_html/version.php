<?php
//
// MultiQC Version Check
//

// First - print the latest version.
// This file is automatically generated by the latest tag in the git repository when a new commit is pushed
$version = file_get_contents("/home/multiqc/version.txt");
preg_replace('/[^\d\.]/', '', $version);
print($version);

// Log version of tool that's asking
if(isset($_GET['v'])){
    // If there are any spaces, take the first part (old versions of MultiQC could give the commit hash)
    $remote_version_pieces = explode(" ", $_GET['v']);
    $remote_version = $remote_version_pieces[0];
    // Collect the dev if it was in the original so that we can append it later
    $dev = stripos($remote_version, 'dev') > 0 ? 'dev' : '';
    // Strip dev0 so that we don't pick up the 0
    $remote_version = str_replace('dev0', '' , $remote_version);
    // Remove anything that's not numeric or a decimal
    $remote_version = preg_replace('/[^\d\.]/', '', $remote_version);
    // Remove trailing decimal
    $remote_version = rtrim($remote_version, '.');
    // Put back the 'dev' if we had it
    $remote_version .= $dev;

    if ($remote_version == '') $remote_version = '< 0.5';

    // Connect to the database
    $dbconfig = parse_ini_file("../config.ini");
    $db = new mysqli('localhost', $dbconfig['user'], $dbconfig['password'], $dbconfig['db']);
    if($db->connect_errno == 0){

        // Insert new record with querying version
        $stmt = $db->prepare("INSERT INTO version_check (version) VALUES (?)");
        $stmt->bind_param('s',$remote_version);
        $stmt->execute();
        $db->close();

    }
}

