---
import BaseLayout from "@layouts/BaseLayout.astro";
import Button from "@components/Button.svelte";
import MultiQCLogo from "/logos/multiqc_logo.svg";
import MultiQCLogoDark from "/logos/multiqc_logo_darkbg.svg";
import bcbiologo from "/images/plugins/bcbio.png";
import claritylogo from "/images/plugins/clarity.png";
import ngilogo from "/images/plugins/ngi-logo.svg";
import { Icon } from "astro-icon";
---

<BaseLayout title={"MultiQC Plugins"} subtitle={}>
  <div class="container-lg pt-20">
    <div class="row items-center">
      <div class="col-full md:col-10">
        <p class="typo-body mb-4">
          MultiQC is built in such a way that externally managed Python packages can tie in to its
          functionality. This allows separate plugin tools to extend its capabilities, adding new
          modules, report templates and doing useful things with the parsed data.
        </p>
        <p class="typo-body">
          The below list highlights a few such plugins - some may be useful to you if they interact
          with external tools which you use (eg. <span class="font-medium">MultiQC_Clarity</span>
          ), others may be helpful as reference for writing your own plugin.
        </p>
      </div>
    </div>
  </div>
  <div class="container-lg mt-20 md:mt-0 md:pt-20">
    <div class="row items-center">
      <div class="col-full md:col-5 12 md:order-2 md:ml-1">
        <div
          class="flex items-center justify-center rounded-md border border-zinc-200 py-24 px-4 shadow dark:border-zinc-600"
        >
          <img src={MultiQCLogo} class="h-16 dark:hidden" />
          <img src={MultiQCLogoDark} class="hidden h-16 dark:block" />
        </div>
      </div>
      <div class="col-full md:col-6 mt-10 md:order-1 md:mt-0">
        <h2 class="typo-h3 mb-4">Example MultiQC Plugin</h2>
        <p class="typo-intro mb-4">A miniature example of a MultiQC plugin.</p>
        <p class="typo-body mb-4">
          This example repository contains the following code to help you get started with writing
          your own MultiQC plugin.
        </p>
        <div class="mt-4 md:mt-8">
          <Button to="https://github.com/MultiQC/example-plugin" variant="primary" size="md">
            <Icon name="mdi:github" class="mr-3 h-6 w-6" />
            View on GitHub
          </Button>
        </div>
      </div>
    </div>
  </div>
  <div class="container-lg mt-20 md:mt-0 md:pt-20">
    <div class="row items-center">
      <div class="col-full md:col-5">
        <div
          class="flex items-center justify-center rounded-md border border-zinc-200 py-20 px-4 shadow dark:border-zinc-700 dark:shadow-zinc-900"
        >
          <img src={claritylogo} class="h-24" />
        </div>
      </div>
      <div class="col-full md:col-6 12 md:ml-1">
        <h2 class="typo-h3 mb-4 mt-10 md:mt-0">MultiQC_Clarity</h2>
        <p class="typo-intro mb-4">
          MultiQC_Clarity is a plugin for MultiQC, able to insert project-level and sample-level
          metadata from the BaseSpace Clarity LIMS into MultiQC Reports.
        </p>
        <p class="typo-body mb-4">
          MultiQC_Clarity connects to your Clarity LIMS installation using the API. MultiQC runs as
          normal, generating a list of sample names based on the contents of the files found. These
          sample names are passed to the MultiQC_Clarity plugin, which searches your Clarity LIMS
          installation for matching sample names. If exact matches are found, then the metadata
          configured in the config file is retrieved and entered into the report.
        </p>
        <div class="mt-4 md:mt-8">
          <Button to="https://github.com/MultiQC/MultiQC_Clarity" variant="primary" size="md">
            <Icon name="mdi:github" class="mr-3 h-6 w-6" />
            View on GitHub
          </Button>
        </div>
      </div>
    </div>
  </div>
  <div class="container-lg mt-20 md:mt-0 md:pt-20">
    <div class="row items-center">
      <div class="col-full md:col-5 12 md:order-2 md:ml-1">
        <div
          class="flex items-center justify-center rounded-md border border-zinc-200 py-20 px-4 shadow dark:border-zinc-700 dark:shadow-zinc-900"
        >
          <img src={bcbiologo} class="h-24" />
        </div>
      </div>
      <div class="col-full md:col-6 mt-10 md:order-1 md:mt-0">
        <h2 class="typo-h3 mb-4">MultiQC_bcbio</h2>
        <p class="typo-body mb-4">
          Plugin for multiqc tool to add in-house QC metrics about coverage, variants and general
          values generated by{" "}
          <a href="https://github.com/chapmanb/bcbio-nextgen" class="text-blue-600">
            bcbio-nextgen
          </a>{" "}
          pipeline.
        </p>
        <div class="mt-4 md:mt-8">
          <Button to="https://github.com/MultiQC/MultiQC_bcbio" variant="primary" size="md">
            <Icon name="mdi:github" class="mr-3 h-6 w-6" />
            View on GitHub
          </Button>
        </div>
      </div>
    </div>
  </div>
  <div class="container-lg py-20">
    <div class="row items-center">
      <div class="col-full md:col-5">
        <div
          class="flex items-center justify-center rounded-md border border-zinc-200 py-20 px-4 shadow dark:border-zinc-700 dark:shadow-zinc-900"
        >
          <img src={ngilogo} class="h-24" />
        </div>
      </div>
      <div class="col-full md:col-6 12 mt-10 md:ml-1 md:mt-0">
        <h2 class="typo-h3 mb-4">MultiQC_NGI</h2>
        <p class="typo-intro mb-4">
          MultiQC_NGI adds custom functionality for the National Genomics Infrastructure at
          SciLifeLab in Sweden.
        </p>
        <p class="typo-body mb-4">
          Extends MultiQC with additional custom plugins and themes, allows interaction with an
          in-house database. Not much use for others outside of our institute directly, but can be
          helpful as a guide for how such plugins can be written.
        </p>
        <div class="mt-4 md:mt-8">
          <Button to="https://github.com/ewels/MultiQC_NGI" variant="primary" size="md">
            <Icon name="mdi:github" class="mr-3 h-6 w-6" />
            View on GitHub
          </Button>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>
<style>
  img {
    object-fit: contain;
  }
</style>
