---
export const prerender = true;
import DocsLayout from "@layouts/DocsLayout.astro";
import fs from "node:fs";

export async function getStaticPaths() {
  const posts = await Astro.glob("../../../../MultiQC/docs/core/**/*.md");

  // Get slugs used to build the side docs navigation
  function get_slug(filename: string) {
    let slug = filename
      .split("/docs/core/")
      .pop()
      .replace(/.md$/, "")
      .replace(/\/index$/, "");
    if (slug == "index") {
      return; // root /docs index - return null for no slug
    }
    return slug;
  }

  // Return the posts map
  return posts.map((post) => ({
    params: {
      slug: get_slug(post.file),
    },
    props: {
      post: post,
      frontmatter: post.frontmatter,
    },
  }));
}

const { Content, frontmatter } = Astro.props.post;

// GitHub URL for the footer
const gh_url =
  "https://github.com/ewels/MultiQC/blob/master/docs/core/" +
  Astro.props.post.file.split("/").pop();

// Get the markdown headings for the table of contents
const headings = Astro.props.post.getHeadings().filter((h) => h.depth >= 2 && h.depth <= 3);

// Copy over any markdown images used to /public
// destination will be created or overwritten by default.
// NB: Regex matches markdown after rehypePlugins modifications in astro.config.mjs
const matches = Astro.props.post.compiledContent().matchAll(/src="\/docs\/images\/([^"]+)"/g);
for (const match of matches) {
  const [fullMatch, filename, content] = match;
  // NB: Paths relative to website root
  console.log("Copying " + filename);
  const src = "../MultiQC/docs/images/" + filename;
  const public_dest = "public/docs/images/" + filename;
  const dist_dest = "dist/docs/images/" + filename;
  fs.copyFile(src, public_dest, fs.constants.COPYFILE_FICLONE, (err) => {
    if (err) throw err;
  });
  // Dist should exist if we're building for production
  // Check if dist/ directory exists
  if (fs.existsSync("dist")) {
    fs.copyFile(src, dist_dest, fs.constants.COPYFILE_FICLONE, (err) => {
      if (err) throw err;
    });
  }
}
---

<DocsLayout
  title={frontmatter.title}
  subtitle={frontmatter.description}
  headings={headings}
  md_github_url={gh_url}
  image={frontmatter.social_image
    ? frontmatter.social_image
    : `${frontmatter.title.toLowerCase().replaceAll(" ", "-")}.png`}
>
  <div class="prose max-w-none dark:prose-invert">
    <Content />
  </div>
</DocsLayout>
