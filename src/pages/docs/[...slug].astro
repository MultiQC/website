---
import DocsLayout from "@layouts/DocsLayout.astro";

export async function getStaticPaths() {
  const posts = await Astro.glob("../../../../MultiQC/docs/core/**/*.md");

  // Get slugs used to build the side docs navigation
  function get_slug(filename: string) {
    let slug = filename
      .split("/docs/core/")
      .pop()
      .replace(/.md$/, "")
      .replace(/\/index$/, "");
    if (slug == "index") {
      return; // root /docs index - return null for no slug
    }
    return slug;
  }

  // Return the posts map
  return posts.map((post) => ({
    params: {
      slug: get_slug(post.file),
    },
    props: {
      post: post,
      frontmatter: post.frontmatter,
    },
  }));
}

const { Content, frontmatter } = Astro.props.post;

// GitHub URL for the footer
const md_filename = Astro.props.post.file.split("/").pop();
const gh_url = "https://github.com/ewels/MultiQC/blob/master/docs/core/" + md_filename;

// Get the markdown headings for the table of contents
const headings = Astro.props.post.getHeadings().filter((h) => h.depth >= 2 && h.depth <= 3);

// get section as second to last element of URL and convert to title case
const section = Astro.props.post.file
  .split("/")
  .slice(-2, -1)[0]
  .replace(/_/g, " ")
  .replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())
  .replace("Core", "Getting Started");
---

<DocsLayout
  title={frontmatter.title}
  subtitle={frontmatter.description}
  section={section ? "Docs / " + section : ""}
  headings={headings}
  md_github_url={gh_url}
  image={frontmatter.social_image
    ? frontmatter.social_image
    : `/og.png?section=${encodeURIComponent("Docs / " + section)}&title=${encodeURIComponent(
        frontmatter.title
      )}`}
>
  <div class="prose max-w-none dark:prose-invert">
    <Content />
  </div>
</DocsLayout>
