---
import BaseLayout from "@layouts/BaseLayout.astro";
import Hero from "@components/Hero.astro";
import MarkdownWrapper from "@components/MarkdownWrapper.svelte";
import FooterPrevNext from "@components/FooterPrevNext.astro";
import SidebarNav from "@components/sidebars/SidebarNav.astro";
import SidebarSecondary from "@components/sidebars/SidebarSecondary.astro";
import CommunityLinks from "@components/CommunityLinks.astro";
// Fetch the config.yml that has section titles and order of pages
import docs_nav from "@src/config.yaml";

export interface Props {
  title?: string;
  subtitle?: string;
  section?: string;
  image?: string;
  md_github_url?: string;
  headings?: {
    depth: number;
    text: string;
    slug: string;
  }[];
}
const { title, subtitle, section, image, md_github_url, headings } = Astro.props;
const community_links = [
  {
    url: md_github_url,
    icon: "mdi:lead-pencil",
    text: "Edit this page",
  },
  {
    url: "https://community.seqera.io/c/multiqc/6",
    icon: "mdi:forum",
    text: "Community Forum",
  },
  {
    url: "https://github.com/ewels/MultiQC",
    icon: "mdi:github",
    text: "GitHub",
  },
  {
    url: "https://twitter.com/MultiQC",
    icon: "mdi:twitter",
    text: "Twitter",
  },
  {
    url: "https://mstdn.science/@multiqc",
    icon: "mdi:mastodon",
    text: "Mastodon",
  },
];

const sections = [];
let prev_page;
let next_page;
let last_page;
let last_matched = false;
const all_docs = await Astro.glob("../../../MultiQC/docs/core/**/*.md");
docs_nav["nav"].forEach((section) => {
  let pages = [];
  Object.values(section)[0].forEach((filename) => {
    var url = "/docs/" + filename.replace(/\.md$/, "").replace(/index$/, "");
    // add trailing slash if Astro.url.pathname has one (true for production, not for dev)
    if (Astro.url.pathname.slice(-1) === "/") {
      url += "/";
    }
    url = url.replace(/\/\/$/, "/");
    var filtered = all_docs.filter(function (el) {
      return el.file.endsWith("docs/core/" + filename);
    });
    const page = [url, filtered[0]];
    pages.push(page);
    // Collect prev- and next-pages
    if (Astro.url.pathname == url) {
      last_matched = true;
      if (last_page) {
        prev_page = last_page;
      }
    } else if (last_matched) {
      next_page = page;
      last_matched = false;
    }
    last_page = page;
  });
  sections.push({ section: section, pages: pages });
});
---

<BaseLayout title={title} subtitle={subtitle} image={image} headings={headings}>
  <Hero>
    <div class="container-lg relative">
      <h1 class="typo-h2">{title}</h1>
      {
        section && (
          <h5 class="typo-h5 mb-4 text-xs uppercase text-blue-400/80 lg:text-base">{section}</h5>
        )
      }
      <p class="typo-blockquote mt-4 lg:mt-8">{subtitle}</p>
    </div>
  </Hero>
  <div class="px-4 py-10 lg:px-10 lg:py-20">
    <div class="lg:flex">
      <div
        class="sticky top-28 mr-5 hidden h-[calc(100vh-7rem)] w-[12rem] flex-none overflow-y-auto pb-10 lg:block 2xl:w-[17rem]"
      >
        <SidebarNav sections={sections} />
      </div>

      <main
        class="lg:container-lg lg:w-[calc(100%-11rem)] xl:w-[calc(100%-29rem)] 2xl:w-[calc(100%-34rem)]"
      >
        <MarkdownWrapper headings={headings} client:load>
          <slot />
        </MarkdownWrapper>
        <nav class="mt-12 text-gray-600 dark:text-gray-400 lg:hidden">
          <CommunityLinks links={community_links} />
        </nav>
      </main>

      <div
        class="sticky top-28 ml-5 hidden h-[calc(100vh-7rem)] w-[17rem] flex-none overflow-y-auto pb-10 xl:block"
      >
        <SidebarSecondary headings={headings} community_links={community_links} />
      </div>
    </div>
  </div>
  <FooterPrevNext md_github_url={md_github_url} prev_page={prev_page} next_page={next_page} />
</BaseLayout>
